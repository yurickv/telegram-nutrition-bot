import { Controller, Get, Post, Put, Delete, Query, Param, Body, HttpException, HttpStatus } from '@nestjs/common';
import { UserService } from './user.service';
import { User } from './user.schema';

@Controller('users')
export class UserController {
    constructor(private readonly userService: UserService) {}

    // üîç –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
    @Get()
    async findAll(@Query('page') page = 1, @Query('limit') limit = 10) {
        return this.userService.findAllPaginated(+page, +limit);
    }

    // üîç –ó–Ω–∞–π—Ç–∏ –ø–æ chatId
    @Get('chat/:chatId')
    async findByChatId(@Param('chatId') chatId: number) {
        const user = await this.userService.findByChatId(chatId);
        if (!user) {
            throw new HttpException('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', HttpStatus.NOT_FOUND);
        }
        return user;
    }

    // ‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    @Post()
    async createOrUpdate(@Body('chatId') chatId: number, @Body() userData: Partial<User>) {
        return this.userService.createOrUpdateUser(chatId, userData);
    }

    // üîÅ –û–Ω–æ–≤–∏—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø–æ–ª—è
    @Put(':chatId')
    async updateUser(@Param('chatId') chatId: number, @Body() updates: Partial<User>) {
        const updated = await this.userService.updateUser(chatId, updates);
        if (!updated) {
            throw new HttpException('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', HttpStatus.NOT_FOUND);
        }
        return updated;
    }
    @Delete(':chatId')
    async deleteUser(@Param('chatId') chatId: number) {
        const result = await this.userService.deleteUser(chatId);
        if (!result.deleted) {
            throw new HttpException('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', HttpStatus.NOT_FOUND);
        }
        return { message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ' };
    }

    // üçé –î–æ–¥–∞—Ç–∏ —É–ª—é–±–ª–µ–Ω—ñ —Å—Ç—Ä–∞–≤–∏
    @Put(':chatId/favorite')
    async addFavoriteFoods(@Param('chatId') chatId: number, @Body('foods') foods: string[]) {
        return this.userService.addFavoriteFoods(chatId, foods);
    }

    // üçé –í–∏–¥–∞–ª–∏—Ç–∏ —É–ª—é–±–ª–µ–Ω—É —Å—Ç—Ä–∞–≤—É
    @Delete(':chatId/favorite')
    async removeFavoriteFood(@Param('chatId') chatId: number, @Query('food') food: string) {
        return this.userService.removeFavoriteFood(chatId, food);
    }

    // üçã –î–æ–¥–∞—Ç–∏ –Ω–µ—É–ª—é–±–ª–µ–Ω—ñ —Å—Ç—Ä–∞–≤–∏
    @Put(':chatId/disliked')
    async addDislikedFoods(@Param('chatId') chatId: number, @Body('foods') foods: string[]) {
        return this.userService.addDislikedFoods(chatId, foods);
    }

    // üçã –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–µ—É–ª—é–±–ª–µ–Ω—É —Å—Ç—Ä–∞–≤—É
    @Delete(':chatId/disliked')
    async removeDislikedFood(@Param('chatId') chatId: number, @Query('food') food: string) {
        return this.userService.removeDislikedFood(chatId, food);
    }
}
