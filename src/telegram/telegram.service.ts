import { Injectable, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import * as TelegramBot from 'node-telegram-bot-api';
import { UserService } from 'src/user/user.service';
import { OpenAIService } from 'src/openai/openai.service';
import { OnboardingService } from './onboarding/onboarding.service';
import { ConfirmationService } from './confirmation/confirmation.service';
import { FoodPreferenceService } from './food/food-preference.service';
import { FoodInputService } from './food/food-input.service';
import { isUserDataValid } from 'src/utils/validateUserData';
import { calculateCalories } from 'src/utils/calcColories';
import { User } from 'src/user/user.schema';

@Injectable()
export class TelegramService implements OnModuleInit {
    private bot: TelegramBot;
    private processingUsers = new Set<number>();
    private userStates = new Map<number, string>();

    private mainKeyboard: TelegramBot.ReplyKeyboardMarkup = {
        keyboard: [[{ text: 'üìã –ú–µ–Ω—é' }, { text: '‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞' }]],
        resize_keyboard: true,
        one_time_keyboard: false,
    };

    constructor(
        private configService: ConfigService,
        private userService: UserService,
        private openAIService: OpenAIService,
        private onboarding: OnboardingService,
        private confirm: ConfirmationService,
        private foodPref: FoodPreferenceService,
        private foodInput: FoodInputService,
    ) {}

    async onModuleInit() {
        const token = this.configService.get<string>('TELEGRAM_BOT_TOKEN');
        const domain = this.configService.get<string>('RENDER_EXTERNAL_URL');
        if (this.configService.get<string>('NODE_ENV') === 'development') {
            this.bot = new TelegramBot(token, { polling: true });
        } else {
            this.bot = new TelegramBot(token, { webHook: { port: false } });
            await this.bot.setWebHook(`${domain}/bot`);
        }

        this.bot.setMyCommands([
            { command: '/start', description: '–†–æ–∑–ø–æ—á–∞—Ç–∏' },
            { command: '/menu', description: '–û—Ç—Ä–∏–º–∞—Ç–∏ –º–µ–Ω—é' },
            { command: '/edit', description: '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ' },
            { command: '/add_favorite', description: '–î–æ–¥–∞—Ç–∏ —É–ª—é–±–ª–µ–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏' },
            { command: '/del_food', description: '–í–∏–∫–ª—é—á–∏—Ç–∏ –Ω–µ–±–∞–∂–∞–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏' },
            { command: '/feedback', description: '–ù–∞–ø–∏—Å–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É' },
        ]);

        const commandHandler = (regex: RegExp, handler: (msg: TelegramBot.Message) => void) => {
            this.bot.onText(regex, (msg) => {
                this.clearUserState(msg.chat.id);
                handler(msg);
            });
        };

        commandHandler(/\/start/, async (msg) => {
            const chatId = msg.chat.id;
            const username = msg.from?.username || '';
            const user = await this.userService.findByChatId(chatId);

            if (!user) {
                await this.userService.createOrUpdateUser(chatId, {
                    username,
                    weight: 0,
                    height: 0,
                    age: 0,
                    sex: true,
                    activity: 1.2,
                    goal: 'maintain',
                    amountMenu: 0,
                });

                this.bot.sendMessage(
                    chatId,
                    `–ü—Ä–∏–≤—ñ—Ç üëã –Ø AI-–¥—ñ—î—Ç–æ–ª–æ–≥.
–Ø –¥–æ–ø–æ–º–æ–∂—É —à–≤–∏–¥–∫–æ —Å–∫–ª–∞—Å—Ç–∏ –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–µ –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å.
–í–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É, –∑—Ä—ñ—Å—Ç —ñ —Ü—ñ–ª—å ‚Äî —ñ –≤–∂–µ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–≤–æ—î –º–µ–Ω—é!`,
                    {
                        reply_markup: this.mainKeyboard,
                    },
                );

                setTimeout(
                    () => this.onboarding.askWeight(this.bot, chatId, (s) => this.setUserState(chatId, s)),
                    1000,
                );
            } else {
                if (user.username !== username) {
                    await this.userService.updateUser(chatId, { username });
                }

                this.confirm.confirmData(this.bot, chatId);
                setTimeout(
                    () =>
                        this.bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:', {
                            reply_markup: this.mainKeyboard,
                        }),
                    1000,
                );
            }
        });

        commandHandler(/\/edit/, (msg) => {
            // this.bot.sendMessage(msg.chat.id, '–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö. –ü–æ—á–Ω–µ–º–æ –∑ –≤–∞–≥–∏:', {
            //     reply_markup: this.mainKeyboard,
            // });
            this.onboarding.askWeight(this.bot, msg.chat.id, (s) => this.setUserState(msg.chat.id, s));
        });

        commandHandler(/\/add_favorite/, (msg) => this.foodPref.handleFavoriteFoods(this.bot, msg.chat.id));

        commandHandler(/\/del_food/, (msg) => this.foodPref.handleDislikedFoods(this.bot, msg.chat.id));

        commandHandler(/\/menu/, async (msg) => {
            await this.sendMenu(msg.chat.id);
        });
        commandHandler(/\/feedback/, (msg) => {
            const chatId = msg.chat.id;
            this.setUserState(chatId, 'waiting_for_feedback');
            this.bot.sendMessage(
                chatId,
                '‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ —Å–≤–æ—ó —Ç—Ä—É–¥–Ω–æ—â—ñ –≤ —Ä–æ–±–æ—Ç—ñ –±–æ—Ç–∞ –∞–±–æ –ø–æ–±–∞–∂–∞–Ω–Ω—è –¥–ª—è –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π (–¥–æ 300 —Å–∏–º–≤–æ–ª—ñ–≤):',
            );
        });

        this.bot.on('message', async (msg) => {
            const chatId = msg.chat.id;
            const text = msg.text?.trim();
            const state = this.userStates.get(chatId);

            // If user entered a command, cancel state
            if (text?.startsWith('/') && state) {
                this.clearUserState(chatId);
                return;
            }

            // Handle persistent keyboard buttons
            if (text === 'üìã –ú–µ–Ω—é') return await this.sendMenu(chatId);
            if (text === '‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞') {
                return this.bot.sendMessage(
                    chatId,
                    `üìä –í—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –∫–∞–ª–æ—Ä—ñ–π–Ω–æ—Å—Ç—ñ‚ùó‚Äî —Ü–µ –∫–ª—é—áüîß –¥–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ö—É–¥–Ω–µ–Ω–Ω—è –∞–±–æ –Ω–∞–±–æ—Ä—É –≤–∞–≥–∏.

ü•ó –ú–µ–Ω—é —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø—Ä–∏–Ω—Ü–∏–ø—ñ–≤:
‚úÖ –ó–¥–æ—Ä–æ–≤–æ–≥–æ üß† —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è  
‚úÖ –ë–∞–ª–∞–Ω—Å—É –º–∞–∫—Ä–æ–µ–ª–µ–º–µ–Ω—Ç—ñ–≤  
‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –ú–û–ó –£–∫—Ä–∞—ó–Ω–∏ üá∫üá¶

üí° –•–æ—á–µ—Ç–µ —É–ª—é–±–ª–µ–Ω—É —Å—Ç—Ä–∞–≤—É –≤ –º–µ–Ω—é?
‚ûï –î–æ–¥–∞—Ç–µ —ó—ó –Ω–∞–∑–≤—É –¥–æ —Å–ø–∏—Å–∫—É *—É–ª—é–±–ª–µ–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤* —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /add\\_favorite

üö´ –ù–µ —Ö–æ—á–µ—Ç–µ –±–∞—á–∏—Ç–∏ –ø–µ–≤–Ω—ñ —Å—Ç—Ä–∞–≤–∏?
‚ûñ –í–∫–∞–∂—ñ—Ç—å —ó—Ö —É —Å–ø–∏—Å–∫—É *–Ω–µ–±–∞–∂–∞–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤* —á–µ—Ä–µ–∑ /del\\_food

üìå *–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*
_–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤–æ—ó –¥–∞–Ω—ñ_ /start
_–ó–º—ñ–Ω–∏—Ç–∏ –¥–∞–Ω—ñ_ /edit
_–û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–µ –º–µ–Ω—é_ /menu
_–î–æ–¥–∞—Ç–∏ —É–ª—é–±–ª–µ–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ / —Å—Ç—Ä–∞–≤–∏ –≤ –º–µ–Ω—é_ /add\\_favorite
_–í–∏–∫–ª—é—á–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏ / —Å—Ç—Ä–∞–≤–∏ –∑ –º–µ–Ω—é_  /del\\_food
–í—ñ–¥–≥—É–∫ –∞–±–æ –ø–æ–±–∞–∂–∞–Ω–Ω—è /feedback
`,
                    {
                        parse_mode: 'Markdown',
                        reply_markup: this.mainKeyboard,
                    },
                );
            }

            // Handle user input based on current state
            switch (state) {
                case 'waiting_for_weight':
                    return this.onboarding.handleWeightInput(this.bot, chatId, text, (s) =>
                        this.setUserState(chatId, s),
                    );
                case 'waiting_for_height':
                    return this.onboarding.handleHeightInput(this.bot, chatId, text, (s) =>
                        this.setUserState(chatId, s),
                    );
                case 'waiting_for_age':
                    return this.onboarding.handleAgeInput(this.bot, chatId, text, (s) => this.setUserState(chatId, s));
                case 'adding_favorite_foods':
                    return this.foodInput.handleFoodInput(this.bot, chatId, text, 'favorite', () =>
                        this.clearUserState(chatId),
                    );
                case 'adding_disliked_foods':
                    return this.foodInput.handleFoodInput(this.bot, chatId, text, 'disliked', () =>
                        this.clearUserState(chatId),
                    );
                case 'waiting_for_feedback':
                    const feedback = msg.text?.trim();
                    if (!feedback || feedback.length > 300) {
                        return this.bot.sendMessage(
                            chatId,
                            '‚ö†Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–µ –º—ñ—Å—Ç–∏—Ç–∏ –¥–æ 300 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.',
                        );
                    }
                    await this.bot.sendMessage(
                        7456685492,
                        `üì® –ù–æ–≤–∏–π —Ñ—ñ–¥–±–µ–∫ –≤—ñ–¥ @${msg.from?.username || '–Ω–µ–≤—ñ–¥–æ–º–æ'}:\n\n${feedback}`,
                    );
                    this.bot.sendMessage(chatId, '‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É.');
                    return this.clearUserState(chatId);
            }
        });

        this.bot.on('callback_query', async (query) => {
            const chatId = query.message.chat.id;
            const data = query.data;

            if (data.startsWith('gender:')) {
                await this.onboarding.handleGender(this.bot, chatId, data, (s) => this.setUserState(chatId, s));
                this.bot.answerCallbackQuery(query.id);
            } else if (data.startsWith('activity:')) {
                await this.onboarding.handleActivity(this.bot, chatId, data, (s) => this.setUserState(chatId, s));
                this.bot.answerCallbackQuery(query.id);
            } else if (data.startsWith('goal:')) {
                await this.onboarding.handleGoal(this.bot, chatId, data, (s) => this.setUserState(chatId, s));
                this.bot.answerCallbackQuery(query.id);
            } else if (data.startsWith('remove_fav:')) {
                const food = data.split(':')[1];
                await this.userService.removeFavoriteFood(chatId, food);
                this.bot.answerCallbackQuery(query.id, { text: `${food} –≤–∏–¥–∞–ª–µ–Ω–æ.` });
                this.foodPref.handleFavoriteFoods(this.bot, chatId);
            } else if (data.startsWith('remove_dis:')) {
                const food = data.split(':')[1];
                await this.userService.removeDislikedFood(chatId, food);
                this.bot.answerCallbackQuery(query.id, { text: `${food} –≤–∏–¥–∞–ª–µ–Ω–æ.` });
                this.foodPref.handleDislikedFoods(this.bot, chatId);
            } else if (data === 'add_fav') {
                this.foodInput.promptAddFoods(this.bot, chatId, 'favorite', (s) => this.setUserState(chatId, s));
                this.bot.answerCallbackQuery(query.id);
            } else if (data === 'add_dis') {
                this.foodInput.promptAddFoods(this.bot, chatId, 'disliked', (s) => this.setUserState(chatId, s));
                this.bot.answerCallbackQuery(query.id);
            }
        });
    }

    private async sendMenu(chatId: number) {
        if (this.processingUsers.has(chatId)) return;
        this.processingUsers.add(chatId);

        try {
            const user = await this.userService.findByChatId(chatId);
            if (!user || !isUserDataValid(user)) {
                return this.bot.sendMessage(chatId, '–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–µ–Ω—é, —Å–ø–µ—Ä—à—É –∑–∞–≤–µ—Ä—à—ñ—Ç—å –∞–Ω–∫–µ—Ç—É –∫–æ–º–∞–Ω–¥–æ—é /edit');
            }

            const now = new Date();
            const last = user.lastMenuRequest ? new Date(user.lastMenuRequest) : null;
            const isSameDay = last && now.toDateString() === last.toDateString();

            const amountToday = isSameDay ? user.amountMenuToday || 0 : 0;

            if (amountToday >= 15) {
                return this.bot.sendMessage(chatId, '‚ùóÔ∏è–í–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–∏ 15 –º–µ–Ω—é —Å—å–æ–≥–æ–¥–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.');
            }

            const loading = await this.bot.sendMessage(chatId, '–ì–æ—Ç—É—î–º–æ –º–µ–Ω—é...');
            const calories = calculateCalories(user);
            const mealPlan = await this.openAIService.generateMealPlan(
                calories,
                user.favoriteFoods,
                user.dislikedFoods,
            );

            this.bot.editMessageText(`–í–∞—à–µ –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å:\n${mealPlan}`, {
                chat_id: chatId,
                message_id: loading.message_id,
            });

            const updateData: Partial<User> = {
                amountMenu: (user.amountMenu || 0) + 1,
                amountMenuToday: amountToday + 1,
                lastMenuRequest: now,
            };

            if (!user.firstInit) {
                updateData.firstInit = now;
            }

            await this.userService.updateUser(chatId, updateData);
        } catch (err) {
            console.error('Menu error:', err);
            this.bot.sendMessage(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –º–µ–Ω—é.');
        } finally {
            this.processingUsers.delete(chatId);
        }
    }

    private setUserState(chatId: number, state: string | null) {
        if (!state) return this.userStates.delete(chatId);
        this.userStates.set(chatId, state);
    }

    private clearUserState(chatId: number) {
        this.userStates.delete(chatId);
    }

    getBot() {
        return this.bot;
    }
}
